---
import { t } from "../utils/i18n";

const achievements = [
  {
    title: t('achievements.items.recommendation.title'),
    description: t('achievements.items.recommendation.description'),
    pdf: "/Portfolio/Carta Ing Rene.pdf"
  },
  {
    title: t('achievements.items.goit.title'),
    description: t('achievements.items.goit.description'),
    pdf: "/Portfolio/GoITRecommendation.pdf"
  },
  {
    title: t('achievements.items.sedes.title'),
    description: t('achievements.items.sedes.description'),
    pdf: "/Portfolio/certificates/sedes-certificate.pdf"
  },
  {
    title: t('achievements.items.tracto.title'),
    description: t('achievements.items.tracto.description'),
    pdf: "/Portfolio/certificates/tractocamiones-certificate.pdf"
  }
];
---

<style>
  .pdf-viewer {
    width: 100%;
    height: 500px;
    border: none;
    border-radius: 0.5rem;
  }
  
  .paper-3d {
    perspective: 1000px;
    transform-style: preserve-3d;
    transition: all 0.6s ease;
    position: relative;
  }
  .paper-3d:hover {
    transform: rotateX(-5deg) rotateY(5deg);
    box-shadow: 0 20px 40px rgba(0,0,0,0.2);
  }
  .paper-content {
    backface-visibility: hidden;
    transform-origin: center center;
    transition: all 0.6s ease;
  }
  .paper-3d:hover .paper-content {
    transform: scale(1.02);
  }
</style>

<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  {achievements.map((achievement) => (
    <div class="paper-3d bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <h3 class="text-xl font-semibold mb-2 text-gray-800 dark:text-white">
        {achievement.title}
      </h3>
      <p class="text-gray-600 dark:text-gray-300 mb-4">
        {achievement.description}
      </p>
      
      <div class="mb-4">
        <iframe
          class="pdf-viewer"
          src={`${achievement.pdf}#toolbar=0`}
          title={achievement.title}
          loading="lazy"
        />
      </div>

      <div class="paper-content flex items-center justify-between">
        <a 
          href={achievement.pdf} 
          target="_blank" 
          rel="noopener noreferrer" 
          class="inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="h-6 w-6 mr-2" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" 
            />
          </svg>
          View Full PDF
        </a>
        
        <button
          class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          onclick={`window.open('${achievement.pdf}', '_blank')`}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="h-5 w-5 mr-2" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" 
            />
          </svg>
          Download
        </button>
      </div>
    </div>
  ))}
</div>

<script>
  import { t } from "../utils/i18n";

  const updateAchievementsText = () => {
    const achievementItems = document.querySelectorAll('.paper-3d');
    const items = ['recommendation', 'goit', 'sedes', 'tracto'];

    achievementItems.forEach((item, index) => {
      const title = item.querySelector('h3');
      const description = item.querySelector('p');

      if (title) title.textContent = t(`achievements.items.${items[index]}.title`);
      if (description) description.textContent = t(`achievements.items.${items[index]}.description`);
    });
  };

  // Actualizar cuando cambia el idioma
  window.addEventListener('storage', (e) => {
    if (e.key === 'language') {
      updateAchievementsText();
    }
  });

  // Actualizar cuando se carga la pÃ¡gina
  document.addEventListener('astro:page-load', () => {
    updateAchievementsText();
  });
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const papers = document.querySelectorAll('.paper-3d');
    papers.forEach(paper => {
      paper.addEventListener('mousemove', (e) => {
        const rect = paper.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = (y - centerY) / 15;
        const rotateY = -(x - centerX) / 15;
        
        paper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(1.05)`;
      });
      
      paper.addEventListener('mouseleave', () => {
        paper.style.transform = 'rotateX(0deg) rotateY(0deg) scale(1)';
      });
    });
  });
</script>
