---
const LANGUAGES = ["Español", "English"]

const getCurrentLanguage = () => {
  if (typeof localStorage !== "undefined") {
    return localStorage.getItem("language") ?? "Español"
  }
  return "Español"
}
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="language-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el idioma</span>
    <span class="language-toggle-icon size-5 transition-all">
      {getCurrentLanguage() === "Español" ? "ES" : "EN"}
    </span>
  </button>
  <div
    transition:persist
    id="languages-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        LANGUAGES.map((language) => (
          <li class="languages-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {language}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #languages-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const languagesMenu = document.getElementById("languages-menu")
  const languageToggleBtn = document.getElementById("language-toggle-btn")
  const languageToggleIcon = document.querySelector(".language-toggle-icon")

  const updateLanguageIcon = (language) => {
    if (languageToggleIcon) {
      languageToggleIcon.textContent = language === "Español" ? "ES" : "EN"
    }
  }

  const handleLanguageChange = (language) => {
    localStorage.setItem("language", language)
    // Disparar el evento de almacenamiento
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'language',
      newValue: language,
      oldValue: localStorage.getItem('language'),
      storageArea: localStorage
    }))
    updateLanguageIcon(language)
  }

  document.addEventListener("click", () => {
    if (languagesMenu) {
      languagesMenu.classList.remove("open")
    }
  })

  if (languageToggleBtn) {
    languageToggleBtn.addEventListener("click", (e) => {
      e.stopPropagation()
      if (languagesMenu) {
        const isClosed = !languagesMenu.classList.contains("open")
        languagesMenu.classList[isClosed ? "add" : "remove"]("open")
      }
    })
  }

  document.querySelectorAll(".languages-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      const target = e.target
      if (target && target.innerText) {
        const language = target.innerText.trim()
        handleLanguageChange(language)
      }
    })
  })

  // Inicializar el ícono con el idioma actual
  const currentLanguage = localStorage.getItem("language") ?? "Español"
  updateLanguageIcon(currentLanguage)

  document.addEventListener('astro:after-swap', () => {
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' })
  })
</script> 