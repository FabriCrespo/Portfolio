---
import ThemeToggle from "./ThemeToggle.astro"
import LanguageToggle from "./LanguageToggle.astro"
import { t } from "../utils/i18n"

const navItems = [
  {
    title: t('nav.experience'),
    label: "experience",
    url: "#experience",
  },
  {
    title: t('nav.projects'),
    label: "projects",
    url: "#projects",
  },
  {
    title: t('nav.achievements'),
    label: "achievements",
    url: "#achievements",
  },
  {
    title: t('nav.about'),
    label: "about-me",
    url: "#about-me",
  },
  {
    title: t('nav.contact'),
    label: "contact",
    url: "#contact",
  },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center relative"
  >
    <!-- Menú móvil -->
    <button
      id="mobile-menu-button"
      class="md:hidden p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
      aria-label="Toggle menu"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"
        />
      </svg>
    </button>

    <!-- Enlaces de navegación -->
    <div
      id="nav-links"
      class="hidden md:flex items-center space-x-1"
    >
      {
        navItems.map((link) => (
          <a
            class="relative block px-3 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
    </div>

    <!-- Controles (idioma y tema) -->
    <div class="flex items-center space-x-2 ml-2">
      <LanguageToggle />
      <ThemeToggle />
    </div>

    <!-- Menú móvil desplegable -->
    <div
      id="mobile-menu"
      class="hidden absolute top-full left-0 right-0 mt-2 py-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
    >
      {
        navItems.map((link) => (
          <a
            class="block px-4 py-2 text-gray-600 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")
    const mobileMenuButton = document.getElementById("mobile-menu-button")
    const mobileMenu = document.getElementById("mobile-menu")

    // Toggle menú móvil
    mobileMenuButton?.addEventListener("click", () => {
      mobileMenu?.classList.toggle("hidden")
    })

    // Cerrar menú al hacer clic en un enlace
    const mobileLinks = mobileMenu?.querySelectorAll("a")
    mobileLinks?.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu?.classList.add("hidden")
      })
    })

    // Smooth scroll para los enlaces
    navItems.forEach(link => {
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
        const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
        if (!targetId) return;

        const targetElement = document.querySelector(targetId);
        if (!targetElement) return;

        const headerHeight = document.querySelector('header')?.offsetHeight || 0;
        const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY - headerHeight;

        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      });
    });

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            const itemLabel = item.getAttribute("aria-label");
            const sectionId = entry.target.id;
            if (itemLabel === sectionId) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }

  /* Animación para el menú móvil */
  #mobile-menu {
    transform-origin: top;
    transition: transform 0.2s ease-out;
  }

  #mobile-menu.hidden {
    transform: scaleY(0);
  }

  #mobile-menu:not(.hidden) {
    transform: scaleY(1);
  }
</style>
