---
import GitHub from "./icons/GitHub.astro";
import NextJS from "./icons/NextJS.astro";
import Tailwind from "./icons/Tailwind.astro";
import Link from "./icons/Link.astro";
import Wordpress from "./icons/Wordpress.astro";
import Laravel from "./icons/Laravel.astro";
import Code from "./icons/Code.astro";
import { t } from "../utils/i18n";
import LinkButton from "./LinkButton.astro";

const TAGS = {
  WORDPRESS: {
    name: "Wordpress",
    class: "bg-[#003159] text-white",
    icon: Wordpress,
  },
  Link: {
    name: "Link",
    class: "bg-black text-white",
    icon: Link,
  },
  NEXT: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJS,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind,
  },
  LARAVEL: {
    name: "Laravel",
    class: "bg-red-600 text-white",
    icon: Laravel,
  },
  ASTRO: {
    name: "Astro",
    class: "bg-orange-500 text-white",
    icon: Code,
  },
};

const PROJECTS = [
  {
    title: t('projects.items.grb.title'),
    description: t('projects.items.grb.description'),
    link: "https://www.grb-group.com/en/",
    // Usar un servicio de captura de pantalla
    image: `https://api.microlink.io?url=${encodeURIComponent('https://www.grb-group.com/en/')}&screenshot=true&meta=false&embed=screenshot.url`,
    tags: [TAGS.ASTRO, TAGS.TAILWIND, TAGS.Link],
    type: "image"
  },
  {
    title: t('projects.items.glucolog.title'),
    description: t('projects.items.glucolog.description'),
    github: "https://github.com/FabriCrespo/glucolog.git",
    // Usar la API de OG Image de GitHub
    image: "https://opengraph.githubassets.com/1/FabriCrespo/glucolog",
    tags: [TAGS.NEXT, TAGS.TAILWIND],
    type: "image"
  },
  {
    title: t('projects.items.tracto.title'),
    description: t('projects.items.tracto.description'),
    link: "https://tractocamionesandina.com/",
    // Usar un servicio de captura de pantalla
    image: `https://api.microlink.io?url=${encodeURIComponent('https://tractocamionesandina.com')}&screenshot=true&meta=false&embed=screenshot.url`,
    tags: [TAGS.WORDPRESS, TAGS.Link],
    type: "image"
  },
  {
    title: t('projects.items.reborn.title'),
    description: t('projects.items.reborn.description'),
    link: "https://www.reborndevelopments.com/",
    // Usar un servicio de captura de pantalla
    image: `https://api.microlink.io?url=${encodeURIComponent('https://www.reborndevelopments.com')}&screenshot=true&meta=false&embed=screenshot.url`,
    tags: [TAGS.NEXT, TAGS.TAILWIND, TAGS.LARAVEL],
    type: "image"
  },
];
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, github, link }) => (
      <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
        <div class="w-full md:w-1/2">
          <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
            <img
              alt={title}
              class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105"
              loading="lazy"
              src={image}
            />
          </div>
        </div>

        <div class="w-full md:w-1/2 md:max-w-lg">
          <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
            {title}
          </h3>
          <div class="mt-2">
            <ul class="flex flex-row mb-2 gap-x-2">
              {tags.map((tag) => (
                <li>
                  <span
                    class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                  >
                    <tag.icon class="size-4" />
                    {tag.name}
                  </span>
                </li>
              ))}
            </ul>

            <div class="mt-2 text-gray-700 dark:text-gray-400 project-description">
              {description}
            </div>
            <footer class="flex items-end justify-start mt-4 gap-x-4">
              {github && (
                <LinkButton href={github}>
                  <GitHub class="size-6" />
                  {t('projects.code')}
                </LinkButton>
              )}
              {link && (
                <LinkButton href={link}>
                  <Link class="size-6" />
                  {t('projects.visitSite')}
                </LinkButton>
              )}
            </footer>
          </div>
        </div>
      </article>
    ))
  }
</div>

<script>
  import { t } from "../utils/i18n";

  const updateProjectsText = () => {
    const title = document.querySelector('h1');
    const projectItems = document.querySelectorAll('article');
    const items = ['grb', 'glucolog', 'tracto', 'reborn'];

    if (title) title.textContent = t('projects.title');

    projectItems.forEach((item, index) => {
      const projectTitle = item.querySelector('h3');
      const projectDescription = item.querySelector('.project-description');

      if (projectTitle) projectTitle.textContent = t(`projects.items.${items[index]}.title`);
      if (projectDescription) projectDescription.textContent = t(`projects.items.${items[index]}.description`);
    });
  };

  // Actualizar cuando cambia el idioma
  window.addEventListener('storage', (e) => {
    if (e.key === 'language') {
      updateProjectsText();
    }
  });

  // Actualizar cuando se carga la pÃ¡gina
  document.addEventListener('astro:page-load', () => {
    updateProjectsText();
  });
</script>


